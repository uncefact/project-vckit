openapi: 3.0.0
info:
  version: 0.0.3-unstable
  title: VC Holder API
  description: >-
    This is an Experimental Open API Specification for the [VC Data
    Model](https://www.w3.org/TR/vc-data-model/).
  license:
    name: W3C Software and Document License
    url: http://www.w3.org/Consortium/Legal/copyright-software.
  contact:
    name: GitHub Source Code
    url: https://github.com/w3c-ccg
tags:
  - name: holder_Credentials
    x-displayName: Credentials
  - name: holder_Presentations
    x-displayName: Presentations
  - name: holder_Exchanges
    x-displayName: Exchanges
  - name: issuer_Credentials
    x-displayName: Credentials
  - name: verifier_Credentials
    x-displayName: Credentials
  - name: verifier_Presentations
    x-displayName: Presentations
paths:
  /v1/credentials/{id}:
    get:
      tags:
        - holder_Credentials
      summary: Gets a credential or verifiable credential by ID
      operationId: getCredential
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '200':
          description: Credential retrieved
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Credential'
                  - $ref: '#/components/schemas/VerifiableCredential'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Credential not found
        '410':
          description: Gone! There is no data here
        '418':
          description: >-
            I'm a teapot - MUST not be returned outside of pre-arranged
            scenarios between both parties
        '500':
          description: Internal Error
        '501':
          description: Not Implemented
    delete:
      tags:
        - holder_Credentials
      summary: Deletes a credential or verifiable credential by ID
      operationId: deleteCredential
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '202':
          description: >-
            Credential deleted - this is a 202 by default as soft deletes and
            processing time are assumed
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Credential not found
        '410':
          description: Gone! There is no data here
        '500':
          description: Internal Error
        '501':
          description: Not Implemented
  /v1/credentials:
    get:
      tags:
        - holder_Credentials
      summary: Gets list of credentials or verifiable credentials
      operationId: getCredentials
      parameters:
        - in: query
          name: type
          schema:
            type: array
            items:
              type: string
              pattern: (credentials|verifiablecredentials|all)
      responses:
        '200':
          description: Credentials retrieved
          content:
            application/json:
              schema:
                type: array
                description: The Credentials
                items:
                  anyOf:
                    - $ref: '#/components/schemas/VerifiableCredential'
                    - $ref: '#/components/schemas/Credential'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '410':
          description: Gone! There is no data here
        '500':
          description: Internal Error
        '501':
          description: Not Implemented
  /v1/credentials/derive:
    post:
      tags:
        - holder_Credentials
      summary: Derives a credential and returns it in the response body.
      operationId: deriveCredential
      description: Derives a credential and returns it in the response body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeriveCredentialRequest'
        description: Parameters for deriving the credential.
      responses:
        '201':
          description: Credential derived successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifiableCredential'
        '400':
          description: Invalid Request
        '500':
          description: Internal Error
        '501':
          description: Not Implemented
  /v1/presentations/{id}:
    get:
      tags:
        - holder_Presentations
      summary: Gets a presentation or verifiable presentation by ID
      operationId: getPresentation
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '200':
          description: Credential retrieved
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Presentation'
                  - $ref: '#/components/schemas/VerifiablePresentation'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Presentation not found
        '410':
          description: Gone! There is no data here
        '500':
          description: Internal Error
        '501':
          description: Not Implemented
    delete:
      tags:
        - holder_Presentations
      summary: Deletes a presentation or verifiable presentation by ID
      operationId: deletePresentation
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '202':
          description: >-
            Presentation deleted - this is a 202 by default as soft deletes and
            processing time are assumed
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Presentation not found
        '410':
          description: Gone! There is no data here
        '500':
          description: Internal Error
        '501':
          description: Not Implemented
  /v1/presentations:
    get:
      tags:
        - holder_Presentations
      summary: Gets list of presentations or verifiable presentations
      operationId: getPresentations
      parameters:
        - in: query
          name: type
          schema:
            type: array
            items:
              type: string
              pattern: (presentations|verifiablepresentations|all)
      responses:
        '200':
          description: Presentations retrieved
          content:
            application/json:
              schema:
                type: array
                description: The Presentations
                items:
                  anyOf:
                    - $ref: '#/components/schemas/Presentation'
                    - $ref: '#/components/schemas/VerifiablePresentation'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '410':
          description: Gone! There is no data here
        '500':
          description: Internal Error
        '501':
          description: Not Implemented
  /v1/presentations/prove:
    post:
      summary: Proves a presentation and returns it in the response body.
      tags:
        - holder_Presentations
      operationId: provePresentation
      description: Proves a presentation and returns it in the response body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvePresentationRequest'
        description: Parameters for proving the presentation.
      responses:
        '201':
          description: Presentation successfully proved!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvePresentationResponse'
        '400':
          description: invalid input!
        '500':
          description: error!
  /v1/exchanges:
    get:
      summary: >-
        Provides a discovery endpoint for the exchanges supported by this server
        endpoint.
      tags:
        - holder_Exchanges
      operationId: discoverExchanges
      description: >-
        This endpoint returns an array of the exchange-ids (path endpoints)
        supported by this server, and the associated protocol supported by that
        exchange endpoint. The list supports pagination. Clients consuming this
        list wishing to use an exchange endpoint MUST recognize and support the
        protocol identified in the value field. Clients are not expected to
        dynamically process the protocol specified.
      parameters:
        - name: index
          in: query
          description: >-
            The starting index for the list that is meaningful to the server. If
            omitted the server must assume the start of the list.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            The maximum number of items to return in the response. If omitted
            the service should return all remaining items from the start index.
          required: false
          schema:
            type: number
      responses:
        '200':
          description: >-
            A map of the exchange-id endpoints to protocols those exchanges
            support.
          content:
            application/json:
              schema:
                required:
                  - count
                  - index
                  - total
                  - exchanges
                properties:
                  count:
                    type: number
                    description: The number of elements returned in the array.
                  total:
                    type: number
                    description: The total number of elements available.
                  exchanges:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: >-
                            the path name of the exchange endpoint. May be a
                            UUID.
                        type:
                          type: string
                          description: >-
                            MUST be a string that references the supported
                            protocol on that endpoint.
                  index:
                    type: object
                    properties:
                      self:
                        type: string
                        description: >-
                          The index position of the start of the returned list.
                          Examples could be a numerica value, a URL, or a value
                          meaningful to the server.
                      next:
                        type: string
                        description: >-
                          The index position for the next set of results (ie,
                          index of the end of this list). Examples could be a
                          numerica value, a URL, or a value meaningful to the
                          server.
        '400':
          description: invalid input
        '500':
          description: error
  /v1/exchanges/{exchange-id}:
    post:
      summary: Initiates an exchange of information.
      tags:
        - holder_Exchanges
      operationId: initiateExchange
      description: >-
        A client can use this endpoint to initiate an exchange of a particular
        type. The client can include HTTP POST information related to the
        details of exchange it would like to initiate. If the server understands
        the request, it returns a Verifiable Presentation Request. A request
        that the server cannot understand results in an error.
      parameters:
        - $ref: '#/components/parameters/ExchangeId'
      requestBody:
        description: >-
          Information related to the type of exchange the client would like to
          start.
        content:
          application/json:
            schema:
              anyOf:
                - type: object
                  description: Data necessary to initiate the exchange.
                - $ref: '#/components/schemas/NotifyPresentationAvailableRequest'
      responses:
        '200':
          description: Proceed with exchange.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifiablePresentationRequestBody'
        '400':
          description: Request is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
        '501':
          description: Service not implemented.
  /v1/exchanges/{exchange-id}/{transaction-id}:
    post:
      summary: Receives information related to an existing exchange.
      tags:
        - holder_Exchanges
      operationId: receiveExchangeData
      description: >-
        A client can use this endpoint to continue the exchange of information
        associated with an initiated exchange by sending a Verifiable
        Presentation with information requested by the server to this endpoint.
      parameters:
        - $ref: '#/components/parameters/ExchangeId'
        - $ref: '#/components/parameters/TransactionId'
      requestBody:
        description: A Verifiable Presentation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifiablePresentationBody'
      responses:
        '200':
          description: Received data was accepted.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/VerifiablePresentationBody'
                  - $ref: '#/components/schemas/VerifiablePresentationRequestBody'
        '400':
          description: Received data is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The associated exchange or transaction was not found.
        '500':
          description: Internal server error.
        '501':
          description: Service not implemented.
  /v1/credentials/issue:
    post:
      summary: Issues a credential and returns it in the response body.
      tags:
        - issuer_Credentials
      operationId: issueCredential
      description: Issues a credential and returns it in the response body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCredentialRequest'
        description: Parameters for issuing the credential.
      responses:
        '201':
          description: Credential successfully issued!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueCredentialResponse'
        '400':
          description: invalid input!
        '500':
          description: error!
  /v1/credentials/status:
    post:
      summary: Updates the status of an issued credential
      tags:
        - issuer_Credentials
      operationId: updateCredentialStatus
      description: Updates the status of an issued credential.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCredentialStatus'
        description: Parameters for updating the status of the issued credential.
      responses:
        '200':
          description: Credential status successfully updated
        '400':
          description: Bad Request
        '404':
          description: Credential not found
        '500':
          description: Internal Server Error
  /v1/credentials/verify:
    post:
      summary: >-
        Verifies a verifiableCredential and returns a verificationResult in the
        response body.
      tags:
        - verifier_Credentials
      operationId: verifyCredential
      description: >-
        Verifies a verifiableCredential and returns a verificationResult in the
        response body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyCredentialRequest'
        description: Parameters for verifying a verifiableCredential.
      responses:
        '200':
          description: Verifiable Credential successfully verified!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationResult'
        '400':
          description: invalid input!
        '500':
          description: error!
  /v1/presentations/verify:
    post:
      summary: >-
        Verifies a Presentation with or without proofs attached and returns a
        verificationResult in the response body.
      tags:
        - verifier_Presentations
      operationId: verifyPresentation
      description: >-
        Verifies a verifiablePresentation and returns a verificationResult in
        the response body.  Given the possibility of denial of service, buffer
        overflow, or other style attacks, an implementation is permitted to rate
        limit or restrict requests against this API endpoint to those requests
        that contain only a single credential with a 413 or 429 error code as
        appropriate.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/VerifyPresentationRequest'
                - $ref: '#/components/schemas/ProoflessVerifyPresentationRequest'
        description: Parameters for verifying a verifiablePresentation.
      responses:
        '200':
          description: Verifiable Presentation successfully verified!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationResult'
        '400':
          description: Invalid or malformed input
        '413':
          description: Payload too large
        '429':
          description: Request rate limit exceeded.
        '500':
          description: Internal Server Error
components:
  securitySchemes:
    auth:
      type: http
      scheme: bearer
  schemas:
    DeriveCredentialRequest:
      type: object
      properties:
        verifiableCredential:
          $ref: '#/components/schemas/VerifiableCredential'
        frame:
          type: object
          description: A JSON-LD frame used for selective disclosure.
        options:
          $ref: '#/components/schemas/DeriveCredentialOptions'
    DeriveCredentialResponse:
      $ref: '#/components/schemas/VerifiableCredential'
    ProvePresentationRequest:
      type: object
      properties:
        presentation:
          $ref: '#/components/schemas/Presentation'
        options:
          $ref: '#/components/schemas/PresentCredentialOptions'
    ProvePresentationResponse:
      type: object
      properties:
        verifiablePresentation:
          $ref: '#/components/schemas/VerifiablePresentation'
    NotifyPresentationAvailableRequest:
      type: object
      properties:
        query:
          type: object
          description: See https://w3c-ccg.github.io/vp-request-spec/#format
          properties:
            type:
              type: string
              description: The type of query the server should reply with.
            credentialQuery:
              type: object
              description: Details of the client's available presentation
    NotifyPresentationAvailableResponse:
      type: object
      properties:
        query:
          type: object
          description: See https://w3c-ccg.github.io/vp-request-spec/#format
        domain:
          type: string
          description: See https://w3id.org/security#domain
        challenge:
          type: string
          description: See https://w3id.org/security#challenge
    ErrorResponse:
      type: object
      description: A response that denotes that an error has occurred.
      properties:
        id:
          type: string
          pattern: '[a-z0-9\-]{8,}'
          description: An error id.
        message:
          type: string
          minLength: 10
          maxLength: 100
          description: The error message.
        details:
          type: object
          description: An object with error details.
      required:
        - id
        - message
    StorePresentationRequest:
      $ref: '#/components/schemas/VerifiablePresentation'
    VerifiablePresentationRequestBody:
      type: object
      properties:
        verifiablePresentationRequest:
          $ref: '#/components/schemas/VerifiablePresentationRequest'
    VerifiablePresentationBody:
      type: object
      properties:
        verifiablePresentation:
          $ref: '#/components/schemas/VerifiablePresentation'
    Issuer:
      description: A JSON-LD Verifiable Credential Issuer.
      oneOf:
        - type: string
        - type: object
          properties:
            id:
              type: string
              description: The issuer id.
    Credential:
      type: object
      description: A JSON-LD Verifiable Credential without a proof.
      required:
        - '@context'
        - issuer
        - credentialSubject
        - type
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the credential.
          items:
            type: string
        id:
          type: string
          description: The ID of the credential.
        type:
          type: array
          description: The JSON-LD type of the credential.
          minItems: 1
          items:
            type: string
        issuer:
          $ref: '#/components/schemas/Issuer'
        issuanceDate:
          type: string
          description: The issuanceDate
        expirationDate:
          type: string
          description: The expirationDate
        credentialSubject:
          type: object
          description: The subject
    LinkedDataProof:
      type: object
      description: A JSON-LD Linked Data proof.
      required:
        - type
        - created
        - verificationMethod
        - proofPurpose
        - proofValue
      properties:
        type:
          type: string
          description: Linked Data Signature Suite used to produce proof.
        created:
          type: string
          description: Date the proof was created.
        challenge:
          type: string
          description: >-
            A value chosen by the verifier to mitigate authentication proof
            replay attacks.
        domain:
          type: string
          description: The domain of the proof to restrict its use to a particular target.
        nonce:
          type: string
          description: >-
            A value chosen by the creator of a proof to randomize proof values
            for privacy purposes.
        verificationMethod:
          type: string
          description: Verification Method used to verify proof.
        proofPurpose:
          type: string
          description: The purpose of the proof to be used with verificationMethod.
        jws:
          type: string
          description: Detached JSON Web Signature.
        proofValue:
          type: string
          description: Value of the Linked Data proof.
    VerifiableCredential:
      type: object
      description: A JSON-LD Verifiable Credential with a proof.
      allOf:
        - $ref: '#/components/schemas/Credential'
        - type: object
          required:
            - proof
          properties:
            proof:
              $ref: '#/components/schemas/LinkedDataProof'
    DeriveCredentialOptions:
      type: object
      additionalProperties: false
      description: Options for specifying how the derived credential is created.
      properties:
        nonce:
          type: string
          description: >-
            An encoded nonce provided by the holder of the credential to be
            included into the LinkedDataProof.
    Presentation:
      type: object
      description: A JSON-LD Verifiable Presentation without a proof.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the presentation.
          items:
            type: string
        id:
          type: string
          description: The ID of the presentation.
        type:
          type: array
          description: The JSON-LD type of the presentation.
          items:
            type: string
        holder:
          type: object
          description: >-
            The holder - will be ignored if no proof is present since there is
            no proof of authority over the credentials
          nullable: true
        verifiableCredential:
          type: array
          description: The Verifiable Credentials
          items:
            $ref: '#/components/schemas/VerifiableCredential'
    VerifiablePresentation:
      type: object
      description: A JSON-LD Verifiable Presentation with a proof.
      allOf:
        - $ref: '#/components/schemas/Presentation'
        - type: object
          required:
            - proof
          properties:
            proof:
              $ref: '#/components/schemas/LinkedDataProof'
    PresentCredentialOptions:
      type: object
      additionalProperties: false
      description: Options for specifying how the LinkedDataProof is created.
      properties:
        type:
          type: string
          description: >-
            The type of the proof. Default is an appropriate proof type
            corresponding to the verification method.
        verificationMethod:
          type: string
          description: >-
            The URI of the verificationMethod used for the proof. If omitted, a
            default verification method will be used.
        proofPurpose:
          type: string
          description: The purpose of the proof. Default 'assertionMethod'.
        created:
          type: string
          description: >-
            The date and time of the proof (with a maximum accuracy in seconds).
            Default current system time.
        challenge:
          type: string
          description: >-
            A challenge provided by the requesting party of the proof. For
            example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
        domain:
          type: string
          description: >-
            The intended domain of validity for the proof. For example
            website.example
    VerifiablePresentationRequest:
      type: object
      description: A Verifiable Presentation Request.
      properties:
        query:
          type: array
          description: A set of one or more queries sent by the requester.
          items:
            type: object
            properties:
              type:
                type: array
                description: The type of the query.
                items:
                  type: string
        challenge:
          type: string
          description: >-
            A challenge, intended to prevent replay attacks, provided by the
            requester that is typically expected to be included in the
            Verifiable Presentation response.
        domain:
          type: string
          description: >-
            A domain, intended to prevent replay attacks, provided by the
            requester that is typically expected to be included in the
            Verifiable Presentation response.
          items:
            type: string
        interact:
          type: array
          description: A list of interaction mechanisms that are supported by the server.
          items:
            type: object
            properties:
              service:
                type: object
                description: >-
                  A service that is supported by the server that is capable of
                  receiving a response to the Verifiable Presentation Request.
                properties:
                  type:
                    type: array
                    description: The type of the service.
                    items:
                      type: string
                  serviceEndpoint:
                    type: string
                    description: >-
                      A URL that can be utilized for interacting with the
                      service for the purposes of responding to the Verifiable
                      Presentation Request.
    IssueCredentialRequest:
      type: object
      required:
        - credential
      properties:
        credential:
          $ref: '#/components/schemas/Credential'
        options:
          $ref: '#/components/schemas/IssueCredentialOptions'
    IssueCredentialResponse:
      type: object
      properties:
        verifiableCredential:
          $ref: '#/components/schemas/VerifiableCredential'
    UpdateCredentialStatus:
      type: object
      description: Request for updating the status of an issued credential.
      properties:
        credentialId:
          type: string
        credentialStatus:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              status:
                type: string
    IssueCredentialOptions:
      type: object
      additionalProperties: false
      description: Options for specifying how the LinkedDataProof is created.
      properties:
        created:
          type: string
          description: >-
            The date and time of the proof (with a maximum accuracy in seconds).
            Default current system time.
        challenge:
          type: string
          description: >-
            A challenge provided by the requesting party of the proof. For
            example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
        domain:
          type: string
          description: >-
            The intended domain of validity for the proof. For example
            website.example
        credentialStatus:
          type: object
          description: >-
            The method of credential status to issue the credential including.
            If omitted credential status will be included.
          properties:
            type:
              type: string
              description: The type of credential status to issue the credential with
    VerifyCredentialRequest:
      type: object
      properties:
        verifiableCredential:
          $ref: '#/components/schemas/VerifiableCredential'
        options:
          $ref: '#/components/schemas/VerifyOptions'
    VerifyCredentialResponse:
      $ref: '#/components/schemas/VerificationResult'
    VerifyPresentationRequest:
      type: object
      properties:
        verifiablePresentation:
          $ref: '#/components/schemas/VerifiablePresentation'
        options:
          $ref: '#/components/schemas/VerifyOptions'
    ProoflessVerifyPresentationRequest:
      type: object
      properties:
        presentation:
          $ref: '#/components/schemas/Presentation'
    VerifyPresentationResponse:
      $ref: '#/components/schemas/VerificationResult'
    VerifyOptions:
      type: object
      additionalProperties: false
      description: Options for specifying how the LinkedDataProof is verified.
      properties:
        checks:
          type: array
          items:
            type: string
          description: An array of verification checks to be performed on the credential. WARNING - Implementers are cautioned that the list of checks is currently incomplete and other checks such as issuance, expiration, nonce, domain, and acceptable issuers are expected to be added in time. A default list is also expected to encapsulate all available checks. This option might be changed to a 'ignore' option where it lists the checks the developer would like to skip.
          example: ['proof']
        challenge:
          type: string
          description: >-
            A challenge provided by the requesting party of the proof. For
            example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
        domain:
          type: string
          description: >-
            The intended domain of validity for the proof. For example
            website.example
    VerificationResult:
      type: object
      additionalProperties: false
      description: Object summarizing a verification
      properties:
        checks:
          type: array
          description: The checks performed
          items:
            type: string
        warnings:
          type: array
          description: Warnings
          items:
            type: string
        errors:
          type: array
          description: Errors
          items:
            type: string
  parameters:
    ObjectId:
      in: path
      name: id
      required: true
      schema:
        anyOf:
          - type: string
            pattern: "[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}"
          - type: string
            pattern: z[1-9A-HJ-NP-Za-km-z]{21,22}
          - type: string
            pattern: u[a-zA-Z0-9_-]{22,23}
    ExchangeId:
      name: exchange-id
      description: A potentially human-readable identifier for an exchange.
      in: path
      required: true
      schema:
        type: string
        minimum: 3
        pattern: '[a-z0-9][a-z0-9\-]{2,}'
    TransactionId:
      in: path
      name: transaction-id
      required: true
      schema:
        anyOf:
          - type: string
            pattern: "[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}"
          - type: string
            pattern: z[1-9A-HJ-NP-Za-km-z]{21,22}
          - type: string
            pattern: u[a-zA-Z0-9_-]{22,23}
security:
  - auth: []
x-tagGroups:
  - name: holder
    tags:
      - holder_Credentials
      - holder_Presentations
      - holder_Exchanges
  - name: issuer
    tags:
      - issuer_Credentials
  - name: verifier
    tags:
      - verifier_Credentials
      - verifier_Presentations
